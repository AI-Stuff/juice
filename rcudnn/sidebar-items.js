initSidebarItems({"constant":[["CHAR_BIT",""],["CHAR_MAX",""],["CHAR_MIN",""],["CUDART_VERSION",""],["CUDA_IPC_HANDLE_SIZE",""],["CUDNN_ATTN_DISABLE_PROJ_BIASES",""],["CUDNN_ATTN_ENABLE_PROJ_BIASES",""],["CUDNN_ATTN_QUERYMAP_ALL_TO_ONE",""],["CUDNN_ATTN_QUERYMAP_ONE_TO_ONE",""],["CUDNN_ATTN_WKIND_COUNT",""],["CUDNN_BN_MIN_EPSILON",""],["CUDNN_DIM_MAX",""],["CUDNN_LRN_MAX_N",""],["CUDNN_LRN_MIN_BETA",""],["CUDNN_LRN_MIN_K",""],["CUDNN_LRN_MIN_N",""],["CUDNN_MAJOR",""],["CUDNN_MINOR",""],["CUDNN_PATCHLEVEL",""],["CUDNN_SEQDATA_DIM_COUNT",""],["CUDNN_VERSION",""],["INT_MAX",""],["INT_MIN",""],["LONG_MAX",""],["LONG_MIN",""],["MB_LEN_MAX",""],["SCHAR_MAX",""],["SCHAR_MIN",""],["SHRT_MAX",""],["SHRT_MIN",""],["UCHAR_MAX",""],["UINT_MAX",""],["ULONG_MAX",""],["USHRT_MAX",""],["WCHAR_MAX",""],["WCHAR_MIN",""],["WINT_MAX",""],["WINT_MIN",""],["_ARGMAX",""],["_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE",""],["_CRT_BUILD_DESKTOP_APP",""],["_CRT_FUNCTIONS_REQUIRED",""],["_CRT_INT_MAX",""],["_CRT_PACKING",""],["_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES",""],["_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY",""],["_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES",""],["_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT",""],["_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY",""],["_HAS_EXCEPTIONS",""],["_SAL_VERSION",""],["_SECURECRT_FILL_BUFFER_PATTERN",""],["_USE_ATTRIBUTES_FOR_SAL",""],["_USE_DECLSPECS_FOR_SAL",""],["__GOT_SECURE_LIB__",""],["__SAL_H_VERSION",""],["__STDC_SECURE_LIB__",""],["__STDC_WANT_SECURE_LIB__",""],["cudaArrayColorAttachment",""],["cudaArrayCubemap",""],["cudaArrayDefault",""],["cudaArrayLayered",""],["cudaArraySurfaceLoadStore",""],["cudaArrayTextureGather",""],["cudaCGScope_cudaCGScopeGrid","< Scope represented by a grid_group"],["cudaCGScope_cudaCGScopeInvalid","< Invalid cooperative group scope"],["cudaCGScope_cudaCGScopeMultiGrid","< Scope represented by a multi_grid_group"],["cudaChannelFormatKind_cudaChannelFormatKindFloat","< Float channel format"],["cudaChannelFormatKind_cudaChannelFormatKindNone","< No channel format"],["cudaChannelFormatKind_cudaChannelFormatKindSigned","< Signed channel format"],["cudaChannelFormatKind_cudaChannelFormatKindUnsigned","< Unsigned channel format"],["cudaComputeMode_cudaComputeModeDefault","< Default compute mode (Multiple threads can use ::cudaSetDevice() with this device)"],["cudaComputeMode_cudaComputeModeExclusive","< Compute-exclusive-thread mode (Only one thread in one process will be able to use ::cudaSetDevice() with this device)"],["cudaComputeMode_cudaComputeModeExclusiveProcess","< Compute-exclusive-process mode (Many threads in one process will be able to use ::cudaSetDevice() with this device)"],["cudaComputeMode_cudaComputeModeProhibited","< Compute-prohibited mode (No threads can use ::cudaSetDevice() with this device)"],["cudaCooperativeLaunchMultiDeviceNoPostSync",""],["cudaCooperativeLaunchMultiDeviceNoPreSync",""],["cudaDataType_t_CUDA_C_16F",""],["cudaDataType_t_CUDA_C_32F",""],["cudaDataType_t_CUDA_C_32I",""],["cudaDataType_t_CUDA_C_32U",""],["cudaDataType_t_CUDA_C_64F",""],["cudaDataType_t_CUDA_C_8I",""],["cudaDataType_t_CUDA_C_8U",""],["cudaDataType_t_CUDA_R_16F",""],["cudaDataType_t_CUDA_R_32F",""],["cudaDataType_t_CUDA_R_32I",""],["cudaDataType_t_CUDA_R_32U",""],["cudaDataType_t_CUDA_R_64F",""],["cudaDataType_t_CUDA_R_8I",""],["cudaDataType_t_CUDA_R_8U",""],["cudaDeviceAttr_cudaDevAttrAsyncEngineCount","< Number of asynchronous engines"],["cudaDeviceAttr_cudaDevAttrCanFlushRemoteWrites","< Device supports flushing of outstanding remote writes."],["cudaDeviceAttr_cudaDevAttrCanMapHostMemory","< Device can map host memory into CUDA address space"],["cudaDeviceAttr_cudaDevAttrCanUseHostPointerForRegisteredMem","< Device can access host registered memory at the same virtual address as the CPU"],["cudaDeviceAttr_cudaDevAttrClockRate","< Peak clock frequency in kilohertz"],["cudaDeviceAttr_cudaDevAttrComputeCapabilityMajor","< Major compute capability version number"],["cudaDeviceAttr_cudaDevAttrComputeCapabilityMinor","< Minor compute capability version number"],["cudaDeviceAttr_cudaDevAttrComputeMode","< Compute mode (See ::cudaComputeMode for details)"],["cudaDeviceAttr_cudaDevAttrComputePreemptionSupported","< Device supports Compute Preemption"],["cudaDeviceAttr_cudaDevAttrConcurrentKernels","< Device can possibly execute multiple kernels concurrently"],["cudaDeviceAttr_cudaDevAttrConcurrentManagedAccess","< Device can coherently access managed memory concurrently with the CPU"],["cudaDeviceAttr_cudaDevAttrCooperativeLaunch","< Device supports launching cooperative kernels via ::cudaLaunchCooperativeKernel"],["cudaDeviceAttr_cudaDevAttrCooperativeMultiDeviceLaunch","< Device can participate in cooperative kernels launched via ::cudaLaunchCooperativeKernelMultiDevice"],["cudaDeviceAttr_cudaDevAttrDirectManagedMemAccessFromHost","< Host can directly access managed memory on the device without migration."],["cudaDeviceAttr_cudaDevAttrEccEnabled","< Device has ECC support enabled"],["cudaDeviceAttr_cudaDevAttrGlobalL1CacheSupported","< Device supports caching globals in L1"],["cudaDeviceAttr_cudaDevAttrGlobalMemoryBusWidth","< Global memory bus width in bits"],["cudaDeviceAttr_cudaDevAttrGpuOverlap","< Device can possibly copy memory and execute a kernel concurrently"],["cudaDeviceAttr_cudaDevAttrHostNativeAtomicSupported","< Link between the device and the host supports native atomic operations"],["cudaDeviceAttr_cudaDevAttrHostRegisterSupported","< Device supports host memory registration via ::cudaHostRegister."],["cudaDeviceAttr_cudaDevAttrIntegrated","< Device is integrated with host memory"],["cudaDeviceAttr_cudaDevAttrIsMultiGpuBoard","< Device is on a multi-GPU board"],["cudaDeviceAttr_cudaDevAttrKernelExecTimeout","< Specifies whether there is a run time limit on kernels"],["cudaDeviceAttr_cudaDevAttrL2CacheSize","< Size of L2 cache in bytes"],["cudaDeviceAttr_cudaDevAttrLocalL1CacheSupported","< Device supports caching locals in L1"],["cudaDeviceAttr_cudaDevAttrManagedMemory","< Device can allocate managed memory on this system"],["cudaDeviceAttr_cudaDevAttrMaxBlockDimX","< Maximum block dimension X"],["cudaDeviceAttr_cudaDevAttrMaxBlockDimY","< Maximum block dimension Y"],["cudaDeviceAttr_cudaDevAttrMaxBlockDimZ","< Maximum block dimension Z"],["cudaDeviceAttr_cudaDevAttrMaxGridDimX","< Maximum grid dimension X"],["cudaDeviceAttr_cudaDevAttrMaxGridDimY","< Maximum grid dimension Y"],["cudaDeviceAttr_cudaDevAttrMaxGridDimZ","< Maximum grid dimension Z"],["cudaDeviceAttr_cudaDevAttrMaxPitch","< Maximum pitch in bytes allowed by memory copies"],["cudaDeviceAttr_cudaDevAttrMaxRegistersPerBlock","< Maximum number of 32-bit registers available per block"],["cudaDeviceAttr_cudaDevAttrMaxRegistersPerMultiprocessor","< Maximum number of 32-bit registers available per multiprocessor"],["cudaDeviceAttr_cudaDevAttrMaxSharedMemoryPerBlock","< Maximum shared memory available per block in bytes"],["cudaDeviceAttr_cudaDevAttrMaxSharedMemoryPerBlockOptin","< The maximum optin shared memory per block. This value may vary by chip. See ::cudaFuncSetAttribute"],["cudaDeviceAttr_cudaDevAttrMaxSharedMemoryPerMultiprocessor","< Maximum shared memory available per multiprocessor in bytes"],["cudaDeviceAttr_cudaDevAttrMaxSurface1DLayeredLayers","< Maximum layers in a 1D layered surface"],["cudaDeviceAttr_cudaDevAttrMaxSurface1DLayeredWidth","< Maximum 1D layered surface width"],["cudaDeviceAttr_cudaDevAttrMaxSurface1DWidth","< Maximum 1D surface width"],["cudaDeviceAttr_cudaDevAttrMaxSurface2DHeight","< Maximum 2D surface height"],["cudaDeviceAttr_cudaDevAttrMaxSurface2DLayeredHeight","< Maximum 2D layered surface height"],["cudaDeviceAttr_cudaDevAttrMaxSurface2DLayeredLayers","< Maximum layers in a 2D layered surface"],["cudaDeviceAttr_cudaDevAttrMaxSurface2DLayeredWidth","< Maximum 2D layered surface width"],["cudaDeviceAttr_cudaDevAttrMaxSurface2DWidth","< Maximum 2D surface width"],["cudaDeviceAttr_cudaDevAttrMaxSurface3DDepth","< Maximum 3D surface depth"],["cudaDeviceAttr_cudaDevAttrMaxSurface3DHeight","< Maximum 3D surface height"],["cudaDeviceAttr_cudaDevAttrMaxSurface3DWidth","< Maximum 3D surface width"],["cudaDeviceAttr_cudaDevAttrMaxSurfaceCubemapLayeredLayers","< Maximum layers in a cubemap layered surface"],["cudaDeviceAttr_cudaDevAttrMaxSurfaceCubemapLayeredWidth","< Maximum cubemap layered surface width"],["cudaDeviceAttr_cudaDevAttrMaxSurfaceCubemapWidth","< Maximum cubemap surface width"],["cudaDeviceAttr_cudaDevAttrMaxTexture1DLayeredLayers","< Maximum layers in a 1D layered texture"],["cudaDeviceAttr_cudaDevAttrMaxTexture1DLayeredWidth","< Maximum 1D layered texture width"],["cudaDeviceAttr_cudaDevAttrMaxTexture1DLinearWidth","< Maximum 1D linear texture width"],["cudaDeviceAttr_cudaDevAttrMaxTexture1DMipmappedWidth","< Maximum mipmapped 1D texture width"],["cudaDeviceAttr_cudaDevAttrMaxTexture1DWidth","< Maximum 1D texture width"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DGatherHeight","< Maximum 2D texture height if cudaArrayTextureGather is set"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DGatherWidth","< Maximum 2D texture width if cudaArrayTextureGather is set"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DHeight","< Maximum 2D texture height"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DLayeredHeight","< Maximum 2D layered texture height"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DLayeredLayers","< Maximum layers in a 2D layered texture"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DLayeredWidth","< Maximum 2D layered texture width"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DLinearHeight","< Maximum 2D linear texture height"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DLinearPitch","< Maximum 2D linear texture pitch in bytes"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DLinearWidth","< Maximum 2D linear texture width"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DMipmappedHeight","< Maximum mipmapped 2D texture height"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DMipmappedWidth","< Maximum mipmapped 2D texture width"],["cudaDeviceAttr_cudaDevAttrMaxTexture2DWidth","< Maximum 2D texture width"],["cudaDeviceAttr_cudaDevAttrMaxTexture3DDepth","< Maximum 3D texture depth"],["cudaDeviceAttr_cudaDevAttrMaxTexture3DDepthAlt","< Alternate maximum 3D texture depth"],["cudaDeviceAttr_cudaDevAttrMaxTexture3DHeight","< Maximum 3D texture height"],["cudaDeviceAttr_cudaDevAttrMaxTexture3DHeightAlt","< Alternate maximum 3D texture height"],["cudaDeviceAttr_cudaDevAttrMaxTexture3DWidth","< Maximum 3D texture width"],["cudaDeviceAttr_cudaDevAttrMaxTexture3DWidthAlt","< Alternate maximum 3D texture width"],["cudaDeviceAttr_cudaDevAttrMaxTextureCubemapLayeredLayers","< Maximum layers in a cubemap layered texture"],["cudaDeviceAttr_cudaDevAttrMaxTextureCubemapLayeredWidth","< Maximum cubemap layered texture width/height"],["cudaDeviceAttr_cudaDevAttrMaxTextureCubemapWidth","< Maximum cubemap texture width/height"],["cudaDeviceAttr_cudaDevAttrMaxThreadsPerBlock","< Maximum number of threads per block"],["cudaDeviceAttr_cudaDevAttrMaxThreadsPerMultiProcessor","< Maximum resident threads per multiprocessor"],["cudaDeviceAttr_cudaDevAttrMemoryClockRate","< Peak memory clock frequency in kilohertz"],["cudaDeviceAttr_cudaDevAttrMultiGpuBoardGroupID","< Unique identifier for a group of devices on the same multi-GPU board"],["cudaDeviceAttr_cudaDevAttrMultiProcessorCount","< Number of multiprocessors on device"],["cudaDeviceAttr_cudaDevAttrPageableMemoryAccess","< Device supports coherently accessing pageable memory without calling cudaHostRegister on it"],["cudaDeviceAttr_cudaDevAttrPageableMemoryAccessUsesHostPageTables","< Device accesses pageable memory via the host's page tables."],["cudaDeviceAttr_cudaDevAttrPciBusId","< PCI bus ID of the device"],["cudaDeviceAttr_cudaDevAttrPciDeviceId","< PCI device ID of the device"],["cudaDeviceAttr_cudaDevAttrPciDomainId","< PCI domain ID of the device"],["cudaDeviceAttr_cudaDevAttrReserved92",""],["cudaDeviceAttr_cudaDevAttrReserved93",""],["cudaDeviceAttr_cudaDevAttrReserved94",""],["cudaDeviceAttr_cudaDevAttrSingleToDoublePrecisionPerfRatio","< Ratio of single precision performance (in floating-point operations per second) to double precision performance"],["cudaDeviceAttr_cudaDevAttrStreamPrioritiesSupported","< Device supports stream priorities"],["cudaDeviceAttr_cudaDevAttrSurfaceAlignment","< Alignment requirement for surfaces"],["cudaDeviceAttr_cudaDevAttrTccDriver","< Device is using TCC driver model"],["cudaDeviceAttr_cudaDevAttrTextureAlignment","< Alignment requirement for textures"],["cudaDeviceAttr_cudaDevAttrTexturePitchAlignment","< Pitch alignment requirement for textures"],["cudaDeviceAttr_cudaDevAttrTotalConstantMemory","< Memory available on device for constant variables in a CUDA C kernel in bytes"],["cudaDeviceAttr_cudaDevAttrUnifiedAddressing","< Device shares a unified address space with the host"],["cudaDeviceAttr_cudaDevAttrWarpSize","< Warp size in threads"],["cudaDeviceBlockingSync",""],["cudaDeviceLmemResizeToMax",""],["cudaDeviceMapHost",""],["cudaDeviceMask",""],["cudaDeviceP2PAttr_cudaDevP2PAttrAccessSupported","< Peer access is enabled"],["cudaDeviceP2PAttr_cudaDevP2PAttrCudaArrayAccessSupported","< Accessing CUDA arrays over the link supported"],["cudaDeviceP2PAttr_cudaDevP2PAttrNativeAtomicSupported","< Native atomic operation over the link supported"],["cudaDeviceP2PAttr_cudaDevP2PAttrPerformanceRank","< A relative value indicating the performance of the link between two devices"],["cudaDeviceScheduleAuto",""],["cudaDeviceScheduleBlockingSync",""],["cudaDeviceScheduleMask",""],["cudaDeviceScheduleSpin",""],["cudaDeviceScheduleYield",""],["cudaEventBlockingSync",""],["cudaEventDefault",""],["cudaEventDisableTiming",""],["cudaEventInterprocess",""],["cudaExternalMemoryDedicated",""],["cudaExternalMemoryHandleType_cudaExternalMemoryHandleTypeD3D11Resource","Handle is a shared NT handle to a D3D11 resource"],["cudaExternalMemoryHandleType_cudaExternalMemoryHandleTypeD3D11ResourceKmt","Handle is a globally shared handle to a D3D11 resource"],["cudaExternalMemoryHandleType_cudaExternalMemoryHandleTypeD3D12Heap","Handle is a D3D12 heap object"],["cudaExternalMemoryHandleType_cudaExternalMemoryHandleTypeD3D12Resource","Handle is a D3D12 committed resource"],["cudaExternalMemoryHandleType_cudaExternalMemoryHandleTypeNvSciBuf","Handle is an NvSciBuf object"],["cudaExternalMemoryHandleType_cudaExternalMemoryHandleTypeOpaqueFd","Handle is an opaque file descriptor"],["cudaExternalMemoryHandleType_cudaExternalMemoryHandleTypeOpaqueWin32","Handle is an opaque shared NT handle"],["cudaExternalMemoryHandleType_cudaExternalMemoryHandleTypeOpaqueWin32Kmt","Handle is an opaque, globally shared handle"],["cudaExternalSemaphoreHandleType_cudaExternalSemaphoreHandleTypeD3D11Fence","Handle is a shared NT handle referencing a D3D11 fence object"],["cudaExternalSemaphoreHandleType_cudaExternalSemaphoreHandleTypeD3D12Fence","Handle is a shared NT handle referencing a D3D12 fence object"],["cudaExternalSemaphoreHandleType_cudaExternalSemaphoreHandleTypeKeyedMutex","Handle is a shared NT handle referencing a D3D11 keyed mutex object"],["cudaExternalSemaphoreHandleType_cudaExternalSemaphoreHandleTypeKeyedMutexKmt","Handle is a shared KMT handle referencing a D3D11 keyed mutex object"],["cudaExternalSemaphoreHandleType_cudaExternalSemaphoreHandleTypeNvSciSync","Opaque handle to NvSciSync Object"],["cudaExternalSemaphoreHandleType_cudaExternalSemaphoreHandleTypeOpaqueFd","Handle is an opaque file descriptor"],["cudaExternalSemaphoreHandleType_cudaExternalSemaphoreHandleTypeOpaqueWin32","Handle is an opaque shared NT handle"],["cudaExternalSemaphoreHandleType_cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt","Handle is an opaque, globally shared handle"],["cudaExternalSemaphoreSignalSkipNvSciBufMemSync",""],["cudaExternalSemaphoreWaitSkipNvSciBufMemSync",""],["cudaFuncAttribute_cudaFuncAttributeMax",""],["cudaFuncAttribute_cudaFuncAttributeMaxDynamicSharedMemorySize","< Maximum dynamic shared memory size"],["cudaFuncAttribute_cudaFuncAttributePreferredSharedMemoryCarveout","< Preferred shared memory-L1 cache split"],["cudaFuncCache_cudaFuncCachePreferEqual","< Prefer equal size L1 cache and shared memory"],["cudaFuncCache_cudaFuncCachePreferL1","< Prefer larger L1 cache and smaller shared memory"],["cudaFuncCache_cudaFuncCachePreferNone","< Default function cache configuration, no preference"],["cudaFuncCache_cudaFuncCachePreferShared","< Prefer larger shared memory and smaller L1 cache"],["cudaGraphExecUpdateResult_cudaGraphExecUpdateError","< The update failed for an unexpected reason which is described in the return value of the function"],["cudaGraphExecUpdateResult_cudaGraphExecUpdateErrorFunctionChanged","< The update failed because the function of a kernel node changed"],["cudaGraphExecUpdateResult_cudaGraphExecUpdateErrorNodeTypeChanged","< The update failed because a node type changed"],["cudaGraphExecUpdateResult_cudaGraphExecUpdateErrorNotSupported","< The update failed because something about the node is not supported"],["cudaGraphExecUpdateResult_cudaGraphExecUpdateErrorParametersChanged","< The update failed because the parameters changed in a way that is not supported"],["cudaGraphExecUpdateResult_cudaGraphExecUpdateErrorTopologyChanged","< The update failed because the topology changed"],["cudaGraphExecUpdateResult_cudaGraphExecUpdateSuccess","< The update succeeded"],["cudaGraphNodeType_cudaGraphNodeTypeCount",""],["cudaGraphNodeType_cudaGraphNodeTypeEmpty","< Empty (no-op) node"],["cudaGraphNodeType_cudaGraphNodeTypeGraph","< Node which executes an embedded graph"],["cudaGraphNodeType_cudaGraphNodeTypeHost","< Host (executable) node"],["cudaGraphNodeType_cudaGraphNodeTypeKernel","< GPU kernel node"],["cudaGraphNodeType_cudaGraphNodeTypeMemcpy","< Memcpy node"],["cudaGraphNodeType_cudaGraphNodeTypeMemset","< Memset node"],["cudaGraphicsCubeFace_cudaGraphicsCubeFaceNegativeX","< Negative X face of cubemap"],["cudaGraphicsCubeFace_cudaGraphicsCubeFaceNegativeY","< Negative Y face of cubemap"],["cudaGraphicsCubeFace_cudaGraphicsCubeFaceNegativeZ","< Negative Z face of cubemap"],["cudaGraphicsCubeFace_cudaGraphicsCubeFacePositiveX","< Positive X face of cubemap"],["cudaGraphicsCubeFace_cudaGraphicsCubeFacePositiveY","< Positive Y face of cubemap"],["cudaGraphicsCubeFace_cudaGraphicsCubeFacePositiveZ","< Positive Z face of cubemap"],["cudaGraphicsMapFlags_cudaGraphicsMapFlagsNone","< Default; Assume resource can be read/written"],["cudaGraphicsMapFlags_cudaGraphicsMapFlagsReadOnly","< CUDA will not write to this resource"],["cudaGraphicsMapFlags_cudaGraphicsMapFlagsWriteDiscard","< CUDA will only write to and will not read from this resource"],["cudaGraphicsRegisterFlags_cudaGraphicsRegisterFlagsNone","< Default"],["cudaGraphicsRegisterFlags_cudaGraphicsRegisterFlagsReadOnly","< CUDA will not write to this resource"],["cudaGraphicsRegisterFlags_cudaGraphicsRegisterFlagsSurfaceLoadStore","< CUDA will bind this resource to a surface reference"],["cudaGraphicsRegisterFlags_cudaGraphicsRegisterFlagsTextureGather","< CUDA will perform texture gather operations on this resource"],["cudaGraphicsRegisterFlags_cudaGraphicsRegisterFlagsWriteDiscard","< CUDA will only write to and will not read from this resource"],["cudaHostAllocDefault",""],["cudaHostAllocMapped",""],["cudaHostAllocPortable",""],["cudaHostAllocWriteCombined",""],["cudaHostRegisterDefault",""],["cudaHostRegisterIoMemory",""],["cudaHostRegisterMapped",""],["cudaHostRegisterPortable",""],["cudaIpcMemLazyEnablePeerAccess",""],["cudaLimit_cudaLimitDevRuntimePendingLaunchCount","< GPU device runtime pending launch count"],["cudaLimit_cudaLimitDevRuntimeSyncDepth","< GPU device runtime synchronize depth"],["cudaLimit_cudaLimitMallocHeapSize","< GPU malloc heap size"],["cudaLimit_cudaLimitMaxL2FetchGranularity","< A value between 0 and 128 that indicates the maximum fetch granularity of L2 (in Bytes). This is a hint"],["cudaLimit_cudaLimitPrintfFifoSize","< GPU printf FIFO size"],["cudaLimit_cudaLimitStackSize","< GPU thread stack size"],["cudaMemAttachGlobal",""],["cudaMemAttachHost",""],["cudaMemAttachSingle",""],["cudaMemRangeAttribute_cudaMemRangeAttributeAccessedBy","< Memory range has ::cudaMemAdviseSetAccessedBy set for specified device"],["cudaMemRangeAttribute_cudaMemRangeAttributeLastPrefetchLocation","< The last location to which the range was prefetched"],["cudaMemRangeAttribute_cudaMemRangeAttributePreferredLocation","< The preferred location of the range"],["cudaMemRangeAttribute_cudaMemRangeAttributeReadMostly","< Whether the range will mostly be read and only occassionally be written to"],["cudaMemcpyKind_cudaMemcpyDefault","< Direction of the transfer is inferred from the pointer values. Requires unified virtual addressing"],["cudaMemcpyKind_cudaMemcpyDeviceToDevice","< Device -> Device"],["cudaMemcpyKind_cudaMemcpyDeviceToHost","< Device -> Host"],["cudaMemcpyKind_cudaMemcpyHostToDevice","< Host   -> Device"],["cudaMemcpyKind_cudaMemcpyHostToHost","< Host   -> Host"],["cudaMemoryAdvise_cudaMemAdviseSetAccessedBy","< Data will be accessed by the specified device, so prevent page faults as much as possible"],["cudaMemoryAdvise_cudaMemAdviseSetPreferredLocation","< Set the preferred location for the data as the specified device"],["cudaMemoryAdvise_cudaMemAdviseSetReadMostly","< Data will mostly be read and only occassionally be written to"],["cudaMemoryAdvise_cudaMemAdviseUnsetAccessedBy","< Let the Unified Memory subsystem decide on the page faulting policy for the specified device"],["cudaMemoryAdvise_cudaMemAdviseUnsetPreferredLocation","< Clear the preferred location for the data"],["cudaMemoryAdvise_cudaMemAdviseUnsetReadMostly","< Undo the effect of ::cudaMemAdviseSetReadMostly"],["cudaMemoryType_cudaMemoryTypeDevice","< Device memory"],["cudaMemoryType_cudaMemoryTypeHost","< Host memory"],["cudaMemoryType_cudaMemoryTypeManaged","< Managed memory"],["cudaMemoryType_cudaMemoryTypeUnregistered","< Unregistered memory"],["cudaNvSciSyncAttrSignal",""],["cudaNvSciSyncAttrWait",""],["cudaOccupancyDefault",""],["cudaOccupancyDisableCachingOverride",""],["cudaOutputMode_cudaCSV","< Output mode Comma separated values format."],["cudaOutputMode_cudaKeyValuePair","< Output mode Key-Value pair format."],["cudaPeerAccessDefault",""],["cudaResourceType_cudaResourceTypeArray","< Array resource"],["cudaResourceType_cudaResourceTypeLinear","< Linear resource"],["cudaResourceType_cudaResourceTypeMipmappedArray","< Mipmapped array resource"],["cudaResourceType_cudaResourceTypePitch2D","< Pitch 2D resource"],["cudaResourceViewFormat_cudaResViewFormatFloat1","< 1 channel 32-bit floating point"],["cudaResourceViewFormat_cudaResViewFormatFloat2","< 2 channel 32-bit floating point"],["cudaResourceViewFormat_cudaResViewFormatFloat4","< 4 channel 32-bit floating point"],["cudaResourceViewFormat_cudaResViewFormatHalf1","< 1 channel 16-bit floating point"],["cudaResourceViewFormat_cudaResViewFormatHalf2","< 2 channel 16-bit floating point"],["cudaResourceViewFormat_cudaResViewFormatHalf4","< 4 channel 16-bit floating point"],["cudaResourceViewFormat_cudaResViewFormatNone","< No resource view format (use underlying resource format)"],["cudaResourceViewFormat_cudaResViewFormatSignedBlockCompressed4","< Block compressed 4 signed"],["cudaResourceViewFormat_cudaResViewFormatSignedBlockCompressed5","< Block compressed 5 signed"],["cudaResourceViewFormat_cudaResViewFormatSignedBlockCompressed6H","< Block compressed 6 signed half-float"],["cudaResourceViewFormat_cudaResViewFormatSignedChar1","< 1 channel signed 8-bit integers"],["cudaResourceViewFormat_cudaResViewFormatSignedChar2","< 2 channel signed 8-bit integers"],["cudaResourceViewFormat_cudaResViewFormatSignedChar4","< 4 channel signed 8-bit integers"],["cudaResourceViewFormat_cudaResViewFormatSignedInt1","< 1 channel signed 32-bit integers"],["cudaResourceViewFormat_cudaResViewFormatSignedInt2","< 2 channel signed 32-bit integers"],["cudaResourceViewFormat_cudaResViewFormatSignedInt4","< 4 channel signed 32-bit integers"],["cudaResourceViewFormat_cudaResViewFormatSignedShort1","< 1 channel signed 16-bit integers"],["cudaResourceViewFormat_cudaResViewFormatSignedShort2","< 2 channel signed 16-bit integers"],["cudaResourceViewFormat_cudaResViewFormatSignedShort4","< 4 channel signed 16-bit integers"],["cudaResourceViewFormat_cudaResViewFormatUnsignedBlockCompressed1","< Block compressed 1"],["cudaResourceViewFormat_cudaResViewFormatUnsignedBlockCompressed2","< Block compressed 2"],["cudaResourceViewFormat_cudaResViewFormatUnsignedBlockCompressed3","< Block compressed 3"],["cudaResourceViewFormat_cudaResViewFormatUnsignedBlockCompressed4","< Block compressed 4 unsigned"],["cudaResourceViewFormat_cudaResViewFormatUnsignedBlockCompressed5","< Block compressed 5 unsigned"],["cudaResourceViewFormat_cudaResViewFormatUnsignedBlockCompressed6H","< Block compressed 6 unsigned half-float"],["cudaResourceViewFormat_cudaResViewFormatUnsignedBlockCompressed7","< Block compressed 7"],["cudaResourceViewFormat_cudaResViewFormatUnsignedChar1","< 1 channel unsigned 8-bit integers"],["cudaResourceViewFormat_cudaResViewFormatUnsignedChar2","< 2 channel unsigned 8-bit integers"],["cudaResourceViewFormat_cudaResViewFormatUnsignedChar4","< 4 channel unsigned 8-bit integers"],["cudaResourceViewFormat_cudaResViewFormatUnsignedInt1","< 1 channel unsigned 32-bit integers"],["cudaResourceViewFormat_cudaResViewFormatUnsignedInt2","< 2 channel unsigned 32-bit integers"],["cudaResourceViewFormat_cudaResViewFormatUnsignedInt4","< 4 channel unsigned 32-bit integers"],["cudaResourceViewFormat_cudaResViewFormatUnsignedShort1","< 1 channel unsigned 16-bit integers"],["cudaResourceViewFormat_cudaResViewFormatUnsignedShort2","< 2 channel unsigned 16-bit integers"],["cudaResourceViewFormat_cudaResViewFormatUnsignedShort4","< 4 channel unsigned 16-bit integers"],["cudaRoundMode_cudaRoundMinInf",""],["cudaRoundMode_cudaRoundNearest",""],["cudaRoundMode_cudaRoundPosInf",""],["cudaRoundMode_cudaRoundZero",""],["cudaSharedCarveout_cudaSharedmemCarveoutDefault","< No preference for shared memory or L1 (default)"],["cudaSharedCarveout_cudaSharedmemCarveoutMaxL1","< Prefer maximum available L1 cache, minimum shared memory"],["cudaSharedCarveout_cudaSharedmemCarveoutMaxShared","< Prefer maximum available shared memory, minimum L1 cache"],["cudaSharedMemConfig_cudaSharedMemBankSizeDefault",""],["cudaSharedMemConfig_cudaSharedMemBankSizeEightByte",""],["cudaSharedMemConfig_cudaSharedMemBankSizeFourByte",""],["cudaStreamCaptureMode_cudaStreamCaptureModeGlobal",""],["cudaStreamCaptureMode_cudaStreamCaptureModeRelaxed",""],["cudaStreamCaptureMode_cudaStreamCaptureModeThreadLocal",""],["cudaStreamCaptureStatus_cudaStreamCaptureStatusActive","< Stream is actively capturing"],["cudaStreamCaptureStatus_cudaStreamCaptureStatusInvalidated","< Stream is part of a capture sequence that has been invalidated, but not terminated"],["cudaStreamCaptureStatus_cudaStreamCaptureStatusNone","< Stream is not capturing"],["cudaStreamDefault",""],["cudaStreamNonBlocking",""],["cudaSurfaceBoundaryMode_cudaBoundaryModeClamp","< Clamp boundary mode"],["cudaSurfaceBoundaryMode_cudaBoundaryModeTrap","< Trap boundary mode"],["cudaSurfaceBoundaryMode_cudaBoundaryModeZero","< Zero boundary mode"],["cudaSurfaceFormatMode_cudaFormatModeAuto","< Auto format mode"],["cudaSurfaceFormatMode_cudaFormatModeForced","< Forced format mode"],["cudaSurfaceType1D",""],["cudaSurfaceType1DLayered",""],["cudaSurfaceType2D",""],["cudaSurfaceType2DLayered",""],["cudaSurfaceType3D",""],["cudaSurfaceTypeCubemap",""],["cudaSurfaceTypeCubemapLayered",""],["cudaTextureAddressMode_cudaAddressModeBorder","< Border address mode"],["cudaTextureAddressMode_cudaAddressModeClamp","< Clamp to edge address mode"],["cudaTextureAddressMode_cudaAddressModeMirror","< Mirror address mode"],["cudaTextureAddressMode_cudaAddressModeWrap","< Wrapping address mode"],["cudaTextureFilterMode_cudaFilterModeLinear","< Linear filter mode"],["cudaTextureFilterMode_cudaFilterModePoint","< Point filter mode"],["cudaTextureReadMode_cudaReadModeElementType","< Read texture as specified element type"],["cudaTextureReadMode_cudaReadModeNormalizedFloat","< Read texture as normalized float"],["cudaTextureType1D",""],["cudaTextureType1DLayered",""],["cudaTextureType2D",""],["cudaTextureType2DLayered",""],["cudaTextureType3D",""],["cudaTextureTypeCubemap",""],["cudaTextureTypeCubemapLayered",""],["libraryPropertyType_t_MAJOR_VERSION",""],["libraryPropertyType_t_MINOR_VERSION",""],["libraryPropertyType_t_PATCH_LEVEL",""]],"enum":[["Error","Defines CUDA's cuDNN errors."],["cudaError","CUDA error types"],["cudnnActivationMode_t",""],["cudnnBatchNormMode_t",""],["cudnnBatchNormOps_t",""],["cudnnCTCLossAlgo_t",""],["cudnnConvolutionBwdDataAlgo_t",""],["cudnnConvolutionBwdDataPreference_t",""],["cudnnConvolutionBwdFilterAlgo_t",""],["cudnnConvolutionBwdFilterPreference_t",""],["cudnnConvolutionFwdAlgo_t",""],["cudnnConvolutionFwdPreference_t",""],["cudnnConvolutionMode_t",""],["cudnnDataType_t",""],["cudnnDeterminism_t",""],["cudnnDirectionMode_t",""],["cudnnDivNormMode_t",""],["cudnnErrQueryMode_t",""],["cudnnFoldingDirection_t",""],["cudnnFusedOpsConstParamLabel_t",""],["cudnnFusedOpsPointerPlaceHolder_t",""],["cudnnFusedOpsVariantParamLabel_t",""],["cudnnFusedOps_t",""],["cudnnIndicesType_t",""],["cudnnLRNMode_t",""],["cudnnLossNormalizationMode_t",""],["cudnnMathType_t",""],["cudnnMultiHeadAttnWeightKind_t",""],["cudnnNanPropagation_t",""],["cudnnOpTensorOp_t",""],["cudnnPoolingMode_t",""],["cudnnRNNAlgo_t",""],["cudnnRNNBiasMode_t",""],["cudnnRNNClipMode_t",""],["cudnnRNNDataLayout_t",""],["cudnnRNNInputMode_t",""],["cudnnRNNMode_t",""],["cudnnRNNPaddingMode_t",""],["cudnnReduceTensorIndices_t",""],["cudnnReduceTensorOp_t",""],["cudnnReorderType_t",""],["cudnnSamplerType_t",""],["cudnnSeqDataAxis_t",""],["cudnnSeverity_t",""],["cudnnSoftmaxAlgorithm_t",""],["cudnnSoftmaxMode_t",""],["cudnnStatus_t",""],["cudnnTensorFormat_t",""],["cudnnWgradMode_t",""]],"fn":[["__report_gsfailure",""],["__security_check_cookie",""],["__security_init_cookie",""],["__threadhandle",""],["__threadid",""],["__va_start",""],["_errno",""],["_get_errno",""],["_invalid_parameter_noinfo",""],["_invalid_parameter_noinfo_noreturn",""],["_invoke_watson",""],["_set_errno",""],["cudaArrayGetInfo","\\brief Gets info about the specified cudaArray"],["cudaBindSurfaceToArray","\\brief Binds an array to a surface"],["cudaBindTexture","\\brief Binds a memory area to a texture"],["cudaBindTexture2D","\\brief Binds a 2D memory area to a texture"],["cudaBindTextureToArray","\\brief Binds an array to a texture"],["cudaBindTextureToMipmappedArray","\\brief Binds a mipmapped array to a texture"],["cudaChooseDevice","\\brief Select compute-device which best matches criteria"],["cudaCreateChannelDesc","\\brief Returns a channel descriptor using the specified format"],["cudaCreateSurfaceObject","\\brief Creates a surface object"],["cudaCreateTextureObject","\\brief Creates a texture object"],["cudaDestroyExternalMemory","\\brief Destroys an external memory object."],["cudaDestroyExternalSemaphore","\\brief Destroys an external semaphore"],["cudaDestroySurfaceObject","\\brief Destroys a surface object"],["cudaDestroyTextureObject","\\brief Destroys a texture object"],["cudaDeviceCanAccessPeer","\\brief Queries if a device may directly access a peer device's memory."],["cudaDeviceDisablePeerAccess","\\brief Disables direct access to memory allocations on a peer device."],["cudaDeviceEnablePeerAccess","\\brief Enables direct access to memory allocations on a peer device."],["cudaDeviceGetAttribute","\\brief Returns information about the device"],["cudaDeviceGetByPCIBusId","\\brief Returns a handle to a compute device"],["cudaDeviceGetCacheConfig","\\brief Returns the preferred cache configuration for the current device."],["cudaDeviceGetLimit","\\brief Returns resource limits"],["cudaDeviceGetNvSciSyncAttributes","\\brief Return NvSciSync attributes that this device can support."],["cudaDeviceGetP2PAttribute","\\brief Queries attributes of the link between two devices."],["cudaDeviceGetPCIBusId","\\brief Returns a PCI Bus Id string for the device"],["cudaDeviceGetSharedMemConfig","\\brief Returns the shared memory configuration for the current device."],["cudaDeviceGetStreamPriorityRange","\\brief Returns numerical values that correspond to the least and greatest stream priorities."],["cudaDeviceReset","\\brief Destroy all allocations and reset all state on the current device in the current process."],["cudaDeviceSetCacheConfig","\\brief Sets the preferred cache configuration for the current device."],["cudaDeviceSetLimit","\\brief Set resource limits"],["cudaDeviceSetSharedMemConfig","\\brief Sets the shared memory configuration for the current device."],["cudaDeviceSynchronize","\\brief Wait for compute device to finish"],["cudaDriverGetVersion","\\brief Returns the latest version of CUDA supported by the driver"],["cudaEventCreate","\\brief Creates an event object"],["cudaEventCreateWithFlags","\\brief Creates an event object with the specified flags"],["cudaEventDestroy","\\brief Destroys an event object"],["cudaEventElapsedTime","\\brief Computes the elapsed time between events"],["cudaEventQuery","\\brief Queries an event's status"],["cudaEventRecord","\\brief Records an event"],["cudaEventSynchronize","\\brief Waits for an event to complete"],["cudaExternalMemoryGetMappedBuffer","\\brief Maps a buffer onto an imported memory object"],["cudaExternalMemoryGetMappedMipmappedArray","\\brief Maps a CUDA mipmapped array onto an external memory object"],["cudaFree","\\brief Frees memory on the device"],["cudaFreeArray","\\brief Frees an array on the device"],["cudaFreeHost","\\brief Frees page-locked memory"],["cudaFreeMipmappedArray","\\brief Frees a mipmapped array on the device"],["cudaFuncGetAttributes","\\brief Find out attributes for a given function"],["cudaFuncSetAttribute","\\brief Set attributes for a given function"],["cudaFuncSetCacheConfig","\\brief Sets the preferred cache configuration for a device function"],["cudaFuncSetSharedMemConfig","\\brief Sets the shared memory configuration for a device function"],["cudaGetChannelDesc","\\brief Get the channel descriptor of an array"],["cudaGetDevice","\\brief Returns which device is currently being used"],["cudaGetDeviceCount","\\brief Returns the number of compute-capable devices"],["cudaGetDeviceFlags","\\brief Gets the flags for the current device"],["cudaGetDeviceProperties","\\brief Returns information about the compute-device"],["cudaGetErrorName","\\brief Returns the string representation of an error code enum name"],["cudaGetErrorString","\\brief Returns the description string for an error code"],["cudaGetExportTable","\\cond impl_private"],["cudaGetLastError","\\brief Returns the last error from a runtime call"],["cudaGetMipmappedArrayLevel","\\brief Gets a mipmap level of a CUDA mipmapped array"],["cudaGetSurfaceObjectResourceDesc","\\brief Returns a surface object's resource descriptor Returns the resource descriptor for the surface object specified by \\p surfObject."],["cudaGetSurfaceReference","\\brief Get the surface reference associated with a symbol"],["cudaGetSymbolAddress","\\brief Finds the address associated with a CUDA symbol"],["cudaGetSymbolSize","\\brief Finds the size of the object associated with a CUDA symbol"],["cudaGetTextureAlignmentOffset","\\brief Get the alignment offset of a texture"],["cudaGetTextureObjectResourceDesc","\\brief Returns a texture object's resource descriptor"],["cudaGetTextureObjectResourceViewDesc","\\brief Returns a texture object's resource view descriptor"],["cudaGetTextureObjectTextureDesc","\\brief Returns a texture object's texture descriptor"],["cudaGetTextureReference","\\brief Get the texture reference associated with a symbol"],["cudaGraphAddChildGraphNode","\\brief Creates a child graph node and adds it to a graph"],["cudaGraphAddDependencies","\\brief Adds dependency edges to a graph."],["cudaGraphAddEmptyNode","\\brief Creates an empty node and adds it to a graph"],["cudaGraphAddHostNode","\\brief Creates a host execution node and adds it to a graph"],["cudaGraphAddKernelNode","\\brief Creates a kernel execution node and adds it to a graph"],["cudaGraphAddMemcpyNode","\\brief Creates a memcpy node and adds it to a graph"],["cudaGraphAddMemsetNode","\\brief Creates a memset node and adds it to a graph"],["cudaGraphChildGraphNodeGetGraph","\\brief Gets a handle to the embedded graph of a child graph node"],["cudaGraphClone","\\brief Clones a graph"],["cudaGraphCreate","\\brief Creates a graph"],["cudaGraphDestroy","\\brief Destroys a graph"],["cudaGraphDestroyNode","\\brief Remove a node from the graph"],["cudaGraphExecDestroy","\\brief Destroys an executable graph"],["cudaGraphExecHostNodeSetParams","\\brief Sets the parameters for a host node in the given graphExec."],["cudaGraphExecKernelNodeSetParams","\\brief Sets the parameters for a kernel node in the given graphExec"],["cudaGraphExecMemcpyNodeSetParams","\\brief Sets the parameters for a memcpy node in the given graphExec."],["cudaGraphExecMemsetNodeSetParams","\\brief Sets the parameters for a memset node in the given graphExec."],["cudaGraphExecUpdate","\\brief Check whether an executable graph can be updated with a graph and perform the update if possible"],["cudaGraphGetEdges","\\brief Returns a graph's dependency edges"],["cudaGraphGetNodes","\\brief Returns a graph's nodes"],["cudaGraphGetRootNodes","\\brief Returns a graph's root nodes"],["cudaGraphHostNodeGetParams","\\brief Returns a host node's parameters"],["cudaGraphHostNodeSetParams","\\brief Sets a host node's parameters"],["cudaGraphInstantiate","\\brief Creates an executable graph from a graph"],["cudaGraphKernelNodeGetParams","\\brief Returns a kernel node's parameters"],["cudaGraphKernelNodeSetParams","\\brief Sets a kernel node's parameters"],["cudaGraphLaunch","\\brief Launches an executable graph in a stream"],["cudaGraphMemcpyNodeGetParams","\\brief Returns a memcpy node's parameters"],["cudaGraphMemcpyNodeSetParams","\\brief Sets a memcpy node's parameters"],["cudaGraphMemsetNodeGetParams","\\brief Returns a memset node's parameters"],["cudaGraphMemsetNodeSetParams","\\brief Sets a memset node's parameters"],["cudaGraphNodeFindInClone","\\brief Finds a cloned version of a node"],["cudaGraphNodeGetDependencies","\\brief Returns a node's dependencies"],["cudaGraphNodeGetDependentNodes","\\brief Returns a node's dependent nodes"],["cudaGraphNodeGetType","\\brief Returns a node's type"],["cudaGraphRemoveDependencies","\\brief Removes dependency edges from a graph."],["cudaGraphicsMapResources","\\brief Map graphics resources for access by CUDA"],["cudaGraphicsResourceGetMappedMipmappedArray","\\brief Get a mipmapped array through which to access a mapped graphics resource."],["cudaGraphicsResourceGetMappedPointer","\\brief Get an device pointer through which to access a mapped graphics resource."],["cudaGraphicsResourceSetMapFlags","\\brief Set usage flags for mapping a graphics resource"],["cudaGraphicsSubResourceGetMappedArray","\\brief Get an array through which to access a subresource of a mapped graphics resource."],["cudaGraphicsUnmapResources","\\brief Unmap graphics resources."],["cudaGraphicsUnregisterResource","\\brief Unregisters a graphics resource for access by CUDA"],["cudaHostAlloc","\\brief Allocates page-locked memory on the host"],["cudaHostGetDevicePointer","\\brief Passes back device pointer of mapped host memory allocated by cudaHostAlloc or registered by cudaHostRegister"],["cudaHostGetFlags","\\brief Passes back flags used to allocate pinned host memory allocated by cudaHostAlloc"],["cudaHostRegister","\\brief Registers an existing host memory range for use by CUDA"],["cudaHostUnregister","\\brief Unregisters a memory range that was registered with cudaHostRegister"],["cudaImportExternalMemory","\\brief Imports an external memory object"],["cudaImportExternalSemaphore","\\brief Imports an external semaphore"],["cudaIpcCloseMemHandle","\\brief Close memory mapped with cudaIpcOpenMemHandle"],["cudaIpcGetEventHandle","\\brief Gets an interprocess handle for a previously allocated event"],["cudaIpcGetMemHandle","\\brief Gets an interprocess memory handle for an existing device memory          allocation"],["cudaIpcOpenEventHandle","\\brief Opens an interprocess event handle for use in the current process"],["cudaIpcOpenMemHandle","\\brief Opens an interprocess memory handle exported from another process          and returns a device pointer usable in the local process."],["cudaLaunchCooperativeKernel","\\brief Launches a device function where thread blocks can cooperate and synchronize as they execute"],["cudaLaunchCooperativeKernelMultiDevice","\\brief Launches device functions on multiple devices where thread blocks can cooperate and synchronize as they execute"],["cudaLaunchHostFunc","\\brief Enqueues a host function call in a stream"],["cudaLaunchKernel","\\brief Launches a device function"],["cudaMalloc","\\brief Allocate memory on the device"],["cudaMalloc3D","\\brief Allocates logical 1D, 2D, or 3D memory objects on the device"],["cudaMalloc3DArray","\\brief Allocate an array on the device"],["cudaMallocArray","\\brief Allocate an array on the device"],["cudaMallocHost","\\brief Allocates page-locked memory on the host"],["cudaMallocManaged","\\brief Allocates memory that will be automatically managed by the Unified Memory system"],["cudaMallocMipmappedArray","\\brief Allocate a mipmapped array on the device"],["cudaMallocPitch","\\brief Allocates pitched memory on the device"],["cudaMemAdvise","\\brief Advise about the usage of a given memory range"],["cudaMemGetInfo","\\brief Gets free and total device memory"],["cudaMemPrefetchAsync","\\brief Prefetches memory to the specified destination device"],["cudaMemRangeGetAttribute","\\brief Query an attribute of a given memory range"],["cudaMemRangeGetAttributes","\\brief Query attributes of a given memory range."],["cudaMemcpy","\\brief Copies data between host and device"],["cudaMemcpy2D","\\brief Copies data between host and device"],["cudaMemcpy2DArrayToArray","\\brief Copies data between host and device"],["cudaMemcpy2DAsync","\\brief Copies data between host and device"],["cudaMemcpy2DFromArray","\\brief Copies data between host and device"],["cudaMemcpy2DFromArrayAsync","\\brief Copies data between host and device"],["cudaMemcpy2DToArray","\\brief Copies data between host and device"],["cudaMemcpy2DToArrayAsync","\\brief Copies data between host and device"],["cudaMemcpy3D","\\brief Copies data between 3D objects"],["cudaMemcpy3DAsync","\\brief Copies data between 3D objects"],["cudaMemcpy3DPeer","\\brief Copies memory between devices"],["cudaMemcpy3DPeerAsync","\\brief Copies memory between devices asynchronously."],["cudaMemcpyArrayToArray","\\brief Copies data between host and device"],["cudaMemcpyAsync","\\brief Copies data between host and device"],["cudaMemcpyFromArray","\\brief Copies data between host and device"],["cudaMemcpyFromArrayAsync","\\brief Copies data between host and device"],["cudaMemcpyFromSymbol","\\brief Copies data from the given symbol on the device"],["cudaMemcpyFromSymbolAsync","\\brief Copies data from the given symbol on the device"],["cudaMemcpyPeer","\\brief Copies memory between two devices"],["cudaMemcpyPeerAsync","\\brief Copies memory between two devices asynchronously."],["cudaMemcpyToArray","\\brief Copies data between host and device"],["cudaMemcpyToArrayAsync","\\brief Copies data between host and device"],["cudaMemcpyToSymbol","\\brief Copies data to the given symbol on the device"],["cudaMemcpyToSymbolAsync","\\brief Copies data to the given symbol on the device"],["cudaMemset","\\brief Initializes or sets device memory to a value"],["cudaMemset2D","\\brief Initializes or sets device memory to a value"],["cudaMemset2DAsync","\\brief Initializes or sets device memory to a value"],["cudaMemset3D","\\brief Initializes or sets device memory to a value"],["cudaMemset3DAsync","\\brief Initializes or sets device memory to a value"],["cudaMemsetAsync","\\brief Initializes or sets device memory to a value"],["cudaOccupancyMaxActiveBlocksPerMultiprocessor","\\brief Returns occupancy for a device function"],["cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags","\\brief Returns occupancy for a device function with the specified flags"],["cudaPeekAtLastError","\\brief Returns the last error from a runtime call"],["cudaPointerGetAttributes","\\brief Returns attributes about a specified pointer"],["cudaRuntimeGetVersion","\\brief Returns the CUDA Runtime version"],["cudaSetDevice","\\brief Set device to be used for GPU executions"],["cudaSetDeviceFlags","\\brief Sets flags to be used for device executions"],["cudaSetDoubleForDevice","\\brief Converts a double argument to be executed on a device"],["cudaSetDoubleForHost","\\brief Converts a double argument after execution on a device"],["cudaSetValidDevices","\\brief Set a list of devices that can be used for CUDA"],["cudaSignalExternalSemaphoresAsync","\\brief Signals a set of external semaphore objects"],["cudaStreamAddCallback","\\brief Add a callback to a compute stream"],["cudaStreamAttachMemAsync","\\brief Attach memory to a stream asynchronously"],["cudaStreamBeginCapture","\\brief Begins graph capture on a stream"],["cudaStreamCreate","\\brief Create an asynchronous stream"],["cudaStreamCreateWithFlags","\\brief Create an asynchronous stream"],["cudaStreamCreateWithPriority","\\brief Create an asynchronous stream with the specified priority"],["cudaStreamDestroy","\\brief Destroys and cleans up an asynchronous stream"],["cudaStreamEndCapture","\\brief Ends capture on a stream, returning the captured graph"],["cudaStreamGetCaptureInfo","\\brief Query capture status of a stream"],["cudaStreamGetFlags","\\brief Query the flags of a stream"],["cudaStreamGetPriority","\\brief Query the priority of a stream"],["cudaStreamIsCapturing","\\brief Returns a stream's capture status"],["cudaStreamQuery","\\brief Queries an asynchronous stream for completion status"],["cudaStreamSynchronize","\\brief Waits for stream tasks to complete"],["cudaStreamWaitEvent","\\brief Make a compute stream wait on an event"],["cudaThreadExchangeStreamCaptureMode","\\brief Swaps the stream capture interaction mode for a thread"],["cudaThreadExit","\\brief Exit and clean up from CUDA launches"],["cudaThreadGetCacheConfig","\\brief Returns the preferred cache configuration for the current device."],["cudaThreadGetLimit","\\brief Returns resource limits"],["cudaThreadSetCacheConfig","\\brief Sets the preferred cache configuration for the current device."],["cudaThreadSetLimit","\\brief Set resource limits"],["cudaThreadSynchronize","\\brief Wait for compute device to finish"],["cudaUnbindTexture","\\brief Unbinds a texture"],["cudaWaitExternalSemaphoresAsync","\\brief Waits on a set of external semaphore objects"],["cudnnActivationBackward",""],["cudnnActivationForward",""],["cudnnAddTensor",""],["cudnnBatchNormalizationBackward",""],["cudnnBatchNormalizationBackwardEx",""],["cudnnBatchNormalizationForwardInference",""],["cudnnBatchNormalizationForwardTraining",""],["cudnnBatchNormalizationForwardTrainingEx",""],["cudnnCTCLoss",""],["cudnnConvolutionBackwardBias",""],["cudnnConvolutionBackwardData",""],["cudnnConvolutionBackwardFilter",""],["cudnnConvolutionBiasActivationForward",""],["cudnnConvolutionForward",""],["cudnnCopyAlgorithmDescriptor",""],["cudnnCreate",""],["cudnnCreateActivationDescriptor",""],["cudnnCreateAlgorithmDescriptor",""],["cudnnCreateAlgorithmPerformance",""],["cudnnCreateAttnDescriptor",""],["cudnnCreateCTCLossDescriptor",""],["cudnnCreateConvolutionDescriptor",""],["cudnnCreateDropoutDescriptor",""],["cudnnCreateFilterDescriptor",""],["cudnnCreateFusedOpsConstParamPack",""],["cudnnCreateFusedOpsPlan",""],["cudnnCreateFusedOpsVariantParamPack",""],["cudnnCreateLRNDescriptor",""],["cudnnCreateOpTensorDescriptor",""],["cudnnCreatePersistentRNNPlan",""],["cudnnCreatePoolingDescriptor",""],["cudnnCreateRNNDataDescriptor",""],["cudnnCreateRNNDescriptor",""],["cudnnCreateReduceTensorDescriptor",""],["cudnnCreateSeqDataDescriptor",""],["cudnnCreateSpatialTransformerDescriptor",""],["cudnnCreateTensorDescriptor",""],["cudnnCreateTensorTransformDescriptor","Create an empty tensor transform descriptor"],["cudnnDeriveBNTensorDescriptor",""],["cudnnDestroy",""],["cudnnDestroyActivationDescriptor",""],["cudnnDestroyAlgorithmDescriptor",""],["cudnnDestroyAlgorithmPerformance",""],["cudnnDestroyAttnDescriptor",""],["cudnnDestroyCTCLossDescriptor",""],["cudnnDestroyConvolutionDescriptor",""],["cudnnDestroyDropoutDescriptor",""],["cudnnDestroyFilterDescriptor",""],["cudnnDestroyFusedOpsConstParamPack",""],["cudnnDestroyFusedOpsPlan",""],["cudnnDestroyFusedOpsVariantParamPack",""],["cudnnDestroyLRNDescriptor",""],["cudnnDestroyOpTensorDescriptor",""],["cudnnDestroyPersistentRNNPlan",""],["cudnnDestroyPoolingDescriptor",""],["cudnnDestroyRNNDataDescriptor",""],["cudnnDestroyRNNDescriptor",""],["cudnnDestroyReduceTensorDescriptor",""],["cudnnDestroySeqDataDescriptor",""],["cudnnDestroySpatialTransformerDescriptor",""],["cudnnDestroyTensorDescriptor",""],["cudnnDestroyTensorTransformDescriptor","Destroys a previously created tensor transform descriptor."],["cudnnDivisiveNormalizationBackward",""],["cudnnDivisiveNormalizationForward",""],["cudnnDropoutBackward",""],["cudnnDropoutForward",""],["cudnnDropoutGetReserveSpaceSize",""],["cudnnDropoutGetStatesSize",""],["cudnnFindConvolutionBackwardDataAlgorithm",""],["cudnnFindConvolutionBackwardDataAlgorithmEx",""],["cudnnFindConvolutionBackwardFilterAlgorithm",""],["cudnnFindConvolutionBackwardFilterAlgorithmEx",""],["cudnnFindConvolutionForwardAlgorithm",""],["cudnnFindConvolutionForwardAlgorithmEx",""],["cudnnFindRNNBackwardDataAlgorithmEx",""],["cudnnFindRNNBackwardWeightsAlgorithmEx",""],["cudnnFindRNNForwardInferenceAlgorithmEx",""],["cudnnFindRNNForwardTrainingAlgorithmEx",""],["cudnnFusedOpsExecute",""],["cudnnGetActivationDescriptor",""],["cudnnGetAlgorithmDescriptor",""],["cudnnGetAlgorithmPerformance",""],["cudnnGetAlgorithmSpaceSize",""],["cudnnGetAttnDescriptor",""],["cudnnGetBatchNormalizationBackwardExWorkspaceSize",""],["cudnnGetBatchNormalizationForwardTrainingExWorkspaceSize",""],["cudnnGetBatchNormalizationTrainingExReserveSpaceSize",""],["cudnnGetCTCLossDescriptor",""],["cudnnGetCTCLossDescriptorEx",""],["cudnnGetCTCLossWorkspaceSize",""],["cudnnGetCallback",""],["cudnnGetConvolution2dDescriptor",""],["cudnnGetConvolution2dForwardOutputDim",""],["cudnnGetConvolutionBackwardDataAlgorithm",""],["cudnnGetConvolutionBackwardDataAlgorithmMaxCount",""],["cudnnGetConvolutionBackwardDataAlgorithm_v7",""],["cudnnGetConvolutionBackwardDataWorkspaceSize",""],["cudnnGetConvolutionBackwardFilterAlgorithm",""],["cudnnGetConvolutionBackwardFilterAlgorithmMaxCount",""],["cudnnGetConvolutionBackwardFilterAlgorithm_v7",""],["cudnnGetConvolutionBackwardFilterWorkspaceSize",""],["cudnnGetConvolutionForwardAlgorithm",""],["cudnnGetConvolutionForwardAlgorithmMaxCount",""],["cudnnGetConvolutionForwardAlgorithm_v7",""],["cudnnGetConvolutionForwardWorkspaceSize",""],["cudnnGetConvolutionGroupCount",""],["cudnnGetConvolutionMathType",""],["cudnnGetConvolutionNdDescriptor",""],["cudnnGetConvolutionNdForwardOutputDim",""],["cudnnGetConvolutionReorderType",""],["cudnnGetCudartVersion",""],["cudnnGetDropoutDescriptor",""],["cudnnGetErrorString",""],["cudnnGetFilter4dDescriptor",""],["cudnnGetFilterNdDescriptor",""],["cudnnGetFilterSizeInBytes",""],["cudnnGetFoldedConvBackwardDataDescriptors",""],["cudnnGetFusedOpsConstParamPackAttribute",""],["cudnnGetFusedOpsVariantParamPackAttribute",""],["cudnnGetLRNDescriptor",""],["cudnnGetMultiHeadAttnBuffers",""],["cudnnGetMultiHeadAttnWeights",""],["cudnnGetOpTensorDescriptor",""],["cudnnGetPooling2dDescriptor",""],["cudnnGetPooling2dForwardOutputDim",""],["cudnnGetPoolingNdDescriptor",""],["cudnnGetPoolingNdForwardOutputDim",""],["cudnnGetProperty",""],["cudnnGetRNNBackwardDataAlgorithmMaxCount",""],["cudnnGetRNNBackwardWeightsAlgorithmMaxCount",""],["cudnnGetRNNBiasMode",""],["cudnnGetRNNDataDescriptor",""],["cudnnGetRNNDescriptor",""],["cudnnGetRNNForwardInferenceAlgorithmMaxCount",""],["cudnnGetRNNForwardTrainingAlgorithmMaxCount",""],["cudnnGetRNNLinLayerBiasParams",""],["cudnnGetRNNLinLayerMatrixParams",""],["cudnnGetRNNMatrixMathType",""],["cudnnGetRNNPaddingMode",""],["cudnnGetRNNParamsSize",""],["cudnnGetRNNProjectionLayers",""],["cudnnGetRNNTrainingReserveSize",""],["cudnnGetRNNWorkspaceSize",""],["cudnnGetReduceTensorDescriptor",""],["cudnnGetReductionIndicesSize",""],["cudnnGetReductionWorkspaceSize",""],["cudnnGetSeqDataDescriptor",""],["cudnnGetStream",""],["cudnnGetTensor4dDescriptor",""],["cudnnGetTensorNdDescriptor",""],["cudnnGetTensorSizeInBytes",""],["cudnnGetTensorTransformDescriptor","Retrieves the values stored in a previously initialized tensor transform descriptor."],["cudnnGetVersion",""],["cudnnIm2Col",""],["cudnnInitTransformDest","Create a destination descriptor for cudnnTransformTensor"],["cudnnLRNCrossChannelBackward",""],["cudnnLRNCrossChannelForward",""],["cudnnMakeFusedOpsPlan",""],["cudnnMultiHeadAttnBackwardData",""],["cudnnMultiHeadAttnBackwardWeights",""],["cudnnMultiHeadAttnForward",""],["cudnnOpTensor",""],["cudnnPoolingBackward",""],["cudnnPoolingForward",""],["cudnnQueryRuntimeError",""],["cudnnRNNBackwardData",""],["cudnnRNNBackwardDataEx",""],["cudnnRNNBackwardWeights",""],["cudnnRNNBackwardWeightsEx",""],["cudnnRNNForwardInference",""],["cudnnRNNForwardInferenceEx",""],["cudnnRNNForwardTraining",""],["cudnnRNNForwardTrainingEx",""],["cudnnRNNGetClip",""],["cudnnRNNSetClip",""],["cudnnReduceTensor",""],["cudnnReorderFilterAndBias",""],["cudnnRestoreAlgorithm",""],["cudnnRestoreDropoutDescriptor",""],["cudnnSaveAlgorithm",""],["cudnnScaleTensor",""],["cudnnSetActivationDescriptor",""],["cudnnSetAlgorithmDescriptor",""],["cudnnSetAlgorithmPerformance",""],["cudnnSetAttnDescriptor",""],["cudnnSetCTCLossDescriptor",""],["cudnnSetCTCLossDescriptorEx",""],["cudnnSetCallback",""],["cudnnSetConvolution2dDescriptor",""],["cudnnSetConvolutionGroupCount",""],["cudnnSetConvolutionMathType",""],["cudnnSetConvolutionNdDescriptor",""],["cudnnSetConvolutionReorderType",""],["cudnnSetDropoutDescriptor",""],["cudnnSetFilter4dDescriptor",""],["cudnnSetFilterNdDescriptor",""],["cudnnSetFusedOpsConstParamPackAttribute",""],["cudnnSetFusedOpsVariantParamPackAttribute",""],["cudnnSetLRNDescriptor",""],["cudnnSetOpTensorDescriptor",""],["cudnnSetPersistentRNNPlan",""],["cudnnSetPooling2dDescriptor",""],["cudnnSetPoolingNdDescriptor",""],["cudnnSetRNNAlgorithmDescriptor",""],["cudnnSetRNNBiasMode",""],["cudnnSetRNNDataDescriptor",""],["cudnnSetRNNDescriptor",""],["cudnnSetRNNDescriptor_v5",""],["cudnnSetRNNDescriptor_v6",""],["cudnnSetRNNMatrixMathType",""],["cudnnSetRNNPaddingMode",""],["cudnnSetRNNProjectionLayers",""],["cudnnSetReduceTensorDescriptor",""],["cudnnSetSeqDataDescriptor",""],["cudnnSetSpatialTransformerNdDescriptor",""],["cudnnSetStream",""],["cudnnSetTensor",""],["cudnnSetTensor4dDescriptor",""],["cudnnSetTensor4dDescriptorEx",""],["cudnnSetTensorNdDescriptor",""],["cudnnSetTensorNdDescriptorEx",""],["cudnnSetTensorTransformDescriptor","Initialize a previously created tensor transform descriptor."],["cudnnSoftmaxBackward",""],["cudnnSoftmaxForward",""],["cudnnSpatialTfGridGeneratorBackward",""],["cudnnSpatialTfGridGeneratorForward",""],["cudnnSpatialTfSamplerBackward",""],["cudnnSpatialTfSamplerForward",""],["cudnnTransformFilter",""],["cudnnTransformTensor",""],["cudnnTransformTensorEx",""]],"mod":[["cuda","Defines Cuda Device Memory."],["utils","Describes utility functionality for CUDA cuDNN."]],"static":[["__security_cookie",""]],"struct":[["API","Defines the Cuda cuDNN API."],["ActivationDescriptor","Describes a ActivationDescriptor."],["CUevent_st",""],["CUexternalMemory_st",""],["CUexternalSemaphore_st",""],["CUgraphExec_st",""],["CUgraphNode_st",""],["CUgraph_st",""],["CUstream_st",""],["CUuuid_st",""],["ConvolutionDescriptor","Describes a Convolution Descriptor."],["Cudnn","Provides a the high-level interface to CUDA's cuDNN."],["DropoutDescriptor","Describes a DropoutDescriptor."],["FilterDescriptor","Describes a Filter Descriptor."],["NormalizationDescriptor","Describes a LRN Descriptor."],["PoolingDescriptor","Describes a Pooling Descriptor."],["RnnDescriptor","Describes a Recurrent Descriptor."],["TensorDescriptor","Describes a TensorDescriptor."],["_Mbstatet",""],["__crt_locale_data",""],["__crt_locale_data_public",""],["__crt_locale_pointers",""],["__crt_multibyte_data",""],["char1",""],["char2",""],["char3",""],["char4",""],["cudaArray",""],["cudaChannelFormatDesc","CUDA Channel format descriptor"],["cudaDeviceProp","CUDA device properties"],["cudaExtent","CUDA extent"],["cudaExternalMemoryBufferDesc","External memory buffer descriptor"],["cudaExternalMemoryHandleDesc","External memory handle descriptor"],["cudaExternalMemoryHandleDesc__bindgen_ty_1__bindgen_ty_1","Win32 handle referencing the semaphore object. Valid when type is one of the following: - ::cudaExternalMemoryHandleTypeOpaqueWin32 - ::cudaExternalMemoryHandleTypeOpaqueWin32Kmt - ::cudaExternalMemoryHandleTypeD3D12Heap - ::cudaExternalMemoryHandleTypeD3D12Resource - ::cudaExternalMemoryHandleTypeD3D11Resource - ::cudaExternalMemoryHandleTypeD3D11ResourceKmt Exactly one of 'handle' and 'name' must be non-NULL. If type is one of the following: ::cudaExternalMemoryHandleTypeOpaqueWin32Kmt ::cudaExternalMemoryHandleTypeD3D11ResourceKmt then 'name' must be NULL."],["cudaExternalMemoryMipmappedArrayDesc","External memory mipmap descriptor"],["cudaExternalSemaphoreHandleDesc","External semaphore handle descriptor"],["cudaExternalSemaphoreHandleDesc__bindgen_ty_1__bindgen_ty_1","Win32 handle referencing the semaphore object. Valid when type is one of the following: - ::cudaExternalSemaphoreHandleTypeOpaqueWin32 - ::cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt - ::cudaExternalSemaphoreHandleTypeD3D12Fence - ::cudaExternalSemaphoreHandleTypeD3D11Fence - ::cudaExternalSemaphoreHandleTypeKeyedMutex Exactly one of 'handle' and 'name' must be non-NULL. If type is one of the following: ::cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt ::cudaExternalSemaphoreHandleTypeKeyedMutexKmt then 'name' must be NULL."],["cudaExternalSemaphoreSignalParams","External semaphore  signal parameters"],["cudaExternalSemaphoreSignalParams__bindgen_ty_1",""],["cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_1","Parameters for fence objects"],["cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_3","Parameters for keyed mutex objects"],["cudaExternalSemaphoreWaitParams","External semaphore wait parameters"],["cudaExternalSemaphoreWaitParams__bindgen_ty_1",""],["cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_1","Parameters for fence objects"],["cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_3","Parameters for keyed mutex objects"],["cudaFuncAttributes","CUDA function attributes"],["cudaGraphicsResource","CUDA graphics interop resource"],["cudaHostNodeParams","CUDA host node parameters"],["cudaIpcEventHandle_st","CUDA IPC event handle"],["cudaIpcMemHandle_st","CUDA IPC memory handle"],["cudaKernelNodeParams","CUDA GPU kernel node parameters"],["cudaLaunchParams","CUDA launch parameters"],["cudaMemcpy3DParms","CUDA 3D memory copying parameters"],["cudaMemcpy3DPeerParms","CUDA 3D cross-device memory copying parameters"],["cudaMemsetParams","CUDA Memset node parameters"],["cudaMipmappedArray",""],["cudaPitchedPtr","CUDA Pitched memory pointer"],["cudaPointerAttributes","CUDA pointer attributes"],["cudaPos","CUDA 3D position"],["cudaResourceDesc","CUDA resource descriptor"],["cudaResourceDesc__bindgen_ty_1__bindgen_ty_1",""],["cudaResourceDesc__bindgen_ty_1__bindgen_ty_2",""],["cudaResourceDesc__bindgen_ty_1__bindgen_ty_3",""],["cudaResourceDesc__bindgen_ty_1__bindgen_ty_4",""],["cudaResourceViewDesc","CUDA resource view descriptor"],["cudaTextureDesc","CUDA texture descriptor"],["cudnnActivationStruct",""],["cudnnAlgorithmPerformanceStruct",""],["cudnnAlgorithmStruct",""],["cudnnAlgorithm_t",""],["cudnnAttnStruct",""],["cudnnCTCLossStruct",""],["cudnnContext",""],["cudnnConvolutionBwdDataAlgoPerf_t",""],["cudnnConvolutionBwdFilterAlgoPerf_t",""],["cudnnConvolutionFwdAlgoPerf_t",""],["cudnnConvolutionStruct",""],["cudnnDebug_t",""],["cudnnDropoutStruct",""],["cudnnFilterStruct",""],["cudnnFusedOpsConstParamStruct",""],["cudnnFusedOpsPlanStruct",""],["cudnnFusedOpsVariantParamStruct",""],["cudnnLRNStruct",""],["cudnnOpTensorStruct",""],["cudnnPersistentRNNPlan",""],["cudnnPoolingStruct",""],["cudnnRNNDataStruct",""],["cudnnRNNStruct",""],["cudnnReduceTensorStruct",""],["cudnnRuntimeTag_t",""],["cudnnSeqDataStruct",""],["cudnnSpatialTransformerStruct",""],["cudnnTensorStruct",""],["cudnnTensorTransformStruct",""],["dim3",""],["double1",""],["double2",""],["double3",""],["double4",""],["float1",""],["float2",""],["float3",""],["float4",""],["int1",""],["int2",""],["int3",""],["int4",""],["long1",""],["long2",""],["long3",""],["long4",""],["longlong1",""],["longlong2",""],["longlong3",""],["longlong4",""],["short1",""],["short2",""],["short3",""],["short4",""],["surfaceReference","CUDA Surface reference"],["textureReference","CUDA texture reference"],["uchar1",""],["uchar2",""],["uchar3",""],["uchar4",""],["uint1",""],["uint2",""],["uint3",""],["uint4",""],["ulong1",""],["ulong2",""],["ulong3",""],["ulong4",""],["ulonglong1",""],["ulonglong2",""],["ulonglong3",""],["ulonglong4",""],["ushort1",""],["ushort2",""],["ushort3",""],["ushort4",""]],"type":[["CUuuid",""],["__crt_bool",""],["__time32_t",""],["__time64_t",""],["__vcrt_bool",""],["_locale_t",""],["cudaArray_const_t","CUDA array (as source copy argument)"],["cudaArray_t","CUDA array"],["cudaCGScope","CUDA cooperative group scope"],["cudaChannelFormatKind","Channel format kind"],["cudaComputeMode","CUDA device compute modes"],["cudaDataType_t",""],["cudaDeviceAttr","CUDA device attributes"],["cudaDeviceP2PAttr","CUDA device P2P attributes"],["cudaEvent_t","CUDA event types"],["cudaExternalMemoryHandleType","External memory handle types"],["cudaExternalMemory_t","CUDA external memory"],["cudaExternalSemaphoreHandleType","External semaphore handle types"],["cudaExternalSemaphore_t","CUDA external semaphore"],["cudaFuncAttribute","CUDA function attributes that can be set using ::cudaFuncSetAttribute"],["cudaFuncCache","CUDA function cache configurations"],["cudaGraphExecUpdateResult","CUDA Graph Update error types"],["cudaGraphExec_t","CUDA executable (launchable) graph"],["cudaGraphNodeType","CUDA Graph node types"],["cudaGraphNode_t","CUDA graph node."],["cudaGraph_t","CUDA graph"],["cudaGraphicsCubeFace","CUDA graphics interop array indices for cube maps"],["cudaGraphicsMapFlags","CUDA graphics interop map flags"],["cudaGraphicsRegisterFlags","CUDA graphics interop register flags"],["cudaGraphicsResource_t","CUDA graphics resource types"],["cudaHostFn_t","CUDA host function \\param userData Argument value passed to the function"],["cudaIpcEventHandle_t",""],["cudaIpcMemHandle_t",""],["cudaLimit","CUDA Limits"],["cudaMemRangeAttribute","CUDA range attributes"],["cudaMemcpyKind","CUDA memory copy types"],["cudaMemoryAdvise","CUDA Memory Advise values"],["cudaMemoryType","CUDA memory types"],["cudaMipmappedArray_const_t","CUDA mipmapped array (as source argument)"],["cudaMipmappedArray_t","CUDA mipmapped array"],["cudaOutputMode","CUDA Profiler Output modes"],["cudaResourceType","CUDA resource types"],["cudaResourceViewFormat","CUDA texture resource view formats"],["cudaRoundMode",""],["cudaSharedCarveout","Shared memory carveout configurations. These may be passed to cudaFuncSetAttribute"],["cudaSharedMemConfig","CUDA shared memory configuration"],["cudaStreamCallback_t","Type of stream callback functions. \\param stream The stream as passed to ::cudaStreamAddCallback, may be NULL. \\param status ::cudaSuccess or any persistent error on the stream. \\param userData User parameter provided at registration."],["cudaStreamCaptureMode","Possible modes for stream capture thread interactions. For more details see ::cudaStreamBeginCapture and ::cudaThreadExchangeStreamCaptureMode"],["cudaStreamCaptureStatus","Possible stream capture statuses returned by ::cudaStreamIsCapturing"],["cudaStream_t","CUDA stream"],["cudaSurfaceBoundaryMode","CUDA Surface boundary modes"],["cudaSurfaceFormatMode","CUDA Surface format modes"],["cudaSurfaceObject_t","An opaque value that represents a CUDA Surface object"],["cudaTextureAddressMode","CUDA texture address modes"],["cudaTextureFilterMode","CUDA texture filter modes"],["cudaTextureObject_t","An opaque value that represents a CUDA texture object"],["cudaTextureReadMode","CUDA texture read modes"],["cudaUUID_t",""],["cudnnActivationDescriptor_t",""],["cudnnAlgorithmDescriptor_t",""],["cudnnAlgorithmPerformance_t",""],["cudnnAttnDescriptor_t",""],["cudnnAttnQueryMap_t",""],["cudnnCTCLossDescriptor_t",""],["cudnnCallback_t",""],["cudnnConvolutionDescriptor_t",""],["cudnnDropoutDescriptor_t",""],["cudnnFilterDescriptor_t",""],["cudnnFusedOpsConstParamPack_t",""],["cudnnFusedOpsPlan_t",""],["cudnnFusedOpsVariantParamPack_t",""],["cudnnHandle_t",""],["cudnnLRNDescriptor_t",""],["cudnnOpTensorDescriptor_t",""],["cudnnPersistentRNNPlan_t",""],["cudnnPoolingDescriptor_t",""],["cudnnRNNDataDescriptor_t",""],["cudnnRNNDescriptor_t",""],["cudnnReduceTensorDescriptor_t",""],["cudnnSeqDataDescriptor_t",""],["cudnnSpatialTransformerDescriptor_t",""],["cudnnTensorDescriptor_t",""],["cudnnTensorTransformDescriptor_t",""],["errno_t",""],["int_fast16_t",""],["int_fast32_t",""],["int_fast64_t",""],["int_fast8_t",""],["int_least16_t",""],["int_least32_t",""],["int_least64_t",""],["int_least8_t",""],["intmax_t",""],["libraryPropertyType_t",""],["mbstate_t",""],["rsize_t",""],["time_t",""],["uint_fast16_t",""],["uint_fast32_t",""],["uint_fast64_t",""],["uint_fast8_t",""],["uint_least16_t",""],["uint_least32_t",""],["uint_least64_t",""],["uint_least8_t",""],["uintmax_t",""],["va_list",""],["wchar_t",""],["wctype_t",""],["wint_t",""]],"union":[["cudaExternalMemoryHandleDesc__bindgen_ty_1",""],["cudaExternalSemaphoreHandleDesc__bindgen_ty_1",""],["cudaExternalSemaphoreSignalParams__bindgen_ty_1__bindgen_ty_2",""],["cudaExternalSemaphoreWaitParams__bindgen_ty_1__bindgen_ty_2",""],["cudaResourceDesc__bindgen_ty_1",""],["cudnnAlgorithm_t_Algorithm",""]]});